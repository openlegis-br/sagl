[buildout]
extends = https://dist.plone.org/versions/zope-2-13-30-versions.cfg
          versions.cfg

extensions = mr.developer

always-checkout = force

auto-checkout = 
               openlegis.sagl
               openlegis.recipe.sagl
               collective.recipe.filestorage

effective-user = zope

parts =
         trml2pdf
         zope2
         productdistros
         zeo-master
         zeo-slave
         instance
         instance-slave
         import
         import-slave
         extensions
         extensions-slave
         encoding
         sagl
         zopepy
         omelette
         chown
         backup
         backupcronjob
         pack-semanal

package-name = openlegis.sagl

eggs = ${buildout:package-name}
    zope.app.container
    Products.LDAPUserFolder
    Products.LDAPMultiPlugins
    requests
    Werkzeug
    wheel
    six
    simplejson
    mechanize
    pyopenssl
    ndg-httpsclient
    pyasn1
    pypdf2
    pdfrw
    Products.PluggableAuthService

zcml = ${buildout:package-name}

develop =

versions = versions

unzip = true

[sources]
openlegis.sagl = svn https://github.com/openlegis-br/sagl/trunk/branches/4.0_buildout/
openlegis.recipe.sagl = svn https://github.com/openlegis-br/sagl/trunk/branches/openlegis.recipe.sagl/
collective.recipe.filestorage = svn https://github.com/pretaweb/collective.recipe.filestorage/trunk/

[trml2pdf]
recipe = zc.recipe.egg
find-links = http://www.openlegis.com.br/downloads/trml2pdf-1.2.tar.gz
eggs = trml2pdf

[zope2]
recipe = zc.recipe.egg
eggs = Zope2
interpreter = zopepy

[productdistros]
recipe = plone.recipe.distros
urls = 
nested-packages =
version-suffix-packages =

[zeo-master]
recipe = plone.recipe.zeoserver[zrs]
effective-user = ${buildout:effective-user}
replicate-to = 7000
zeo-address = 127.0.0.1:8300
monitor-address = 127.0.0.1:8100
zeo-var = ${buildout:directory}/var
pack-days = 0
pack-keep-old = false 
#pack-user = client
#pack-password = OpenLegisSAGL
#authentication-database = ${buildout:directory}/zeoauth.db
#authentication-realm = SAGL
blob-storage = ${zeo-master:zeo-var}/blobstorage
zeo-blob-storage = ${zeo-master:zeo-var}/blobstorage
zeo-shared-blob-dir = on
zeo-conf-additional =
    <zrs sapl_documentos>
    replicate-to 7001
    keep-alive-delay 60
      <filestorage sapl_documentos>
        path ${zeo-master:zeo-var}/filestorage/sapl_documentos.fs
      </filestorage>
    </zrs>
eggs =
    ${buildout:eggs}
    ZopeUndo
    zc.zrs
    zope.file

[zeo-slave]
recipe = plone.recipe.zeoserver[zrs]
effective-user = ${buildout:effective-user}
replicate-from = ${zeo-master:replicate-to}
zeo-address = 127.0.0.1:8301
monitor-address = 127.0.0.1:8101
zeo-var = ${buildout:directory}/var2
var = ${buildout:directory}/var2
pack-days = 0
pack-keep-old = false 
#pack-user = client
#pack-password = OpenLegisSAGL
#authentication-database = ${buildout:directory}/zeoauth.db
#authentication-realm = SAGL
blob-storage = ${zeo-master:zeo-var}/blobstorage
zeo-blob-storage = ${zeo-master:zeo-var}/blobstorage
zeo-shared-blob-dir = on
zeo-conf-additional =
    <zrs sapl_documentos>
      replicate-from 127.0.0.1:7001
      keep-alive-delay 60
      <filestorage sapl_documentos>
        path ${zeo-slave:var}/filestorage/sapl_documentos.fs
      </filestorage>
   </zrs>
eggs =
    ${buildout:eggs}
    ZopeUndo
    zc.zrs
    zope.file

[instance]
recipe = plone.recipe.zope2instance
name = instance
http-address = 8080
zeo-client = on
zeo-address =  ${zeo-master:zeo-address}
#zeo-username = client
#zeo-password = OpenLegisSAGL
#zeo-realm = SAGL
user = admin:openlegis
effective-user = ${buildout:effective-user}
blob-storage = ${zeo-master:zeo-var}/blobstorage
shared-blob = on
verbose-security = off
debug-mode = off
event-log-level = info
#event-log-handler = logging.handlers.TimedRotatingFileHandler #wgsi
#event-log-args = (r"event.log", ) #wgsi
#event-log-kwargs = {"when": "D", "interval": 1} #wsgi
event-log-max-size = 5 MB
event-log-old-files = 5
access-log-max-size = 20 MB
access-log-old-files = 5
environment-vars =
    PYTHON_EGG_CACHE ${buildout:directory}/var/.python-eggs
    TEMP ${buildout:directory}/var/tmp
    TMP ${buildout:directory}/var/tmp
    PTS_LANGUAGES en, es, pt-br
    zope_i18n_allowed_languages en, es, pt_BR
    zope_i18n_compile_mo_files true

zope-conf-additional =
 extensions ${buildout:directory}/parts/instance/Extensions
    #<ftp-server>
    #   address 127.0.0.1:8021
    #</ftp-server>
    <zodb_db sapl_documentos>
      # FileStorage database sapl_documentos
      <zeoclient>
        server ${zeo-master:zeo-address}
        storage sapl_documentos
        name sapl_documentos
        var ${buildout:directory}/parts/${instance:name}/var
      </zeoclient>
      mount-point /sagl/sapl_documentos
      #explicit declaration of object ZODB mount point object type
      container-class OFS.Folder.Folder
    </zodb_db>

eggs =
    ${buildout:eggs}

zcml =
    ${buildout:zcml}

products =
    ${buildout:directory}/parts/productdistros

[instance-slave]
recipe = plone.recipe.zope2instance
name = instance-slave
http-address = 8081
zeo-client = on
zeo-address =  ${zeo-master:zeo-address}
#zeo-username = client
#zeo-password = OpenLegisSAGL 
#zeo-realm = SAGL
user = admin:openlegis
effective-user = ${buildout:effective-user}
blob-storage = ${zeo-master:zeo-var}/blobstorage
shared-blob = on
verbose-security = off
debug-mode = off
event-log-level = info
#event-log-handler = logging.handlers.TimedRotatingFileHandler #wsgi
#event-log-args = (r"event.log", ) #wsgi
#event-log-kwargs = {"when": "D", "interval": 1} #wsgi
event-log-max-size = 5 MB
event-log-old-files = 5
access-log-max-size = 20 MB
access-log-old-files = 5
environment-vars =
    PYTHON_EGG_CACHE ${buildout:directory}/var/.python-eggs
    TEMP ${buildout:directory}/var/tmp
    TMP ${buildout:directory}/var/tmp
    PTS_LANGUAGES en, es, pt-br
    zope_i18n_allowed_languages en, es, pt_BR
    zope_i18n_compile_mo_files true

zope-conf-additional =
 extensions ${buildout:directory}/parts/instance-slave/Extensions
    <zodb_db sapl_documentos>
      # FileStorage database sapl_documentos
      <zeoclient>
        server ${zeo-master:zeo-address}
        storage sapl_documentos
        name sapl_documentos
        var ${buildout:directory}/parts/${instance-slave:name}/var
      </zeoclient>
      mount-point /sagl/sapl_documentos
      #explicit declaration of object ZODB mount point object type
      container-class OFS.Folder.Folder
    </zodb_db>

eggs =
    ${buildout:eggs}

zcml =
    ${buildout:zcml}

products =
    ${buildout:directory}/parts/productdistros

[sagl]
recipe = openlegis.recipe.sagl
sagl-id = sagl
admin-user = admin
mysql-user = root
mysql-pass = openlegis
mysql-db = openlegis
mysql-host = localhost
container-path = /sagl/sapl_documentos
add-mountpoint = on

[import]
recipe = plone.recipe.command
update-command = ${import:command}
command = cp ${buildout:directory}/src/openlegis.sagl/import/*.zexp ${buildout:directory}/var/instance/import/

[import-slave]
recipe = plone.recipe.command
update-command = ${import-slave:command}
command = cp ${buildout:directory}/src/openlegis.sagl/import/*.zexp ${buildout:directory}/var/instance-slave/import/

[extensions]
recipe = plone.recipe.command
update-command = ${extensions:command}
command = cp -r ${buildout:directory}/src/openlegis.sagl/openlegis/sagl/Extensions ${buildout:directory}/parts/instance/

[extensions-slave]
recipe = plone.recipe.command
update-command = ${extensions-slave:command}
command = cp -r ${buildout:directory}/src/openlegis.sagl/openlegis/sagl/Extensions ${buildout:directory}/parts/instance-slave/

[encoding]
recipe = collective.recipe.template
output = ${buildout:directory}/lib/python2.7/sitecustomize.py
mode = 600
input = inline:
    import sys
    sys.setdefaultencoding('utf-8')

[zopepy]
recipe = zc.recipe.egg
eggs = ${instance:eggs}
interpreter = zopepy
scripts = zopepy

[omelette]
recipe = collective.recipe.omelette
eggs = ${instance:eggs}

[chown]
recipe = plone.recipe.command
command = chown -R ${buildout:effective-user}:${buildout:effective-user} ${buildout:directory}

[backup]
recipe = collective.recipe.backup
keep = 2
debug = false
gzip = false
pre_command = echo 'Fazendo backup...'
post_command =
    echo 'Backup finalizado com sucesso!'

recipe = collective.recipe.backup
additional_filestorages =
    sapl_documentos

[backupcronjob]
recipe = z3c.recipe.usercrontab
times = 30 23 * * *
command = ${buildout:directory}/bin/backup

[pack-semanal]
recipe = z3c.recipe.usercrontab
times = 0 1 * * 6
command = ${buildout:directory}/bin/zeopack
